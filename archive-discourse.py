# Archive a Discourse
# https://github.com/kitsandkats/ArchiveDiscourse
#
# Forked and adapted from: https://github.com/mcmcclur/ArchiveDiscourse

# The main code added to the original script is a
# way to get *all* posts in a topic (not just the first 20)
#
# The code is not perfect by any means, but it worked for my purposes!
#
# Be sure to define the base_url of the Discourse instance,
# the path of the directory to save stuff on the local machine,
# and an archive_blurb to describe the site.
#
# Note that the directory specified by `path` will be overwritten.
#
#
# It is recommended to run this code using Python 3 and a virtualenv.
# One place to learn more about how to do that is here:
# https://realpython.com/python-virtual-environments-a-primer/
#

from datetime import date
import os, requests, base64

# Make sure to customize these variables
cookie_name = '_t'
cookie = ''
base_url = 'https://my-discourse'
path = os.path.join(os.getcwd(), 'export')
archive_blurb = "Archive " + date.today().strftime("%d/%m/%Y") + '.'

try:
    from urllib.parse import urlparse
except ImportError:
    from urlparse import urlparse
from bs4 import BeautifulSoup as bs
from PIL import Image
from io import BytesIO
from time import sleep

from shutil import rmtree

# When archiving larger sites (like meta.discourse.org), you might need to
# increase the number of max_retries to connect.
# Doesn't seem to be necessary for all sites but it *is* necessary for Meta.

from requests.adapters import HTTPAdapter

s = requests.Session()
s.mount(base_url, HTTPAdapter(max_retries=5))

# Copy the cookie from your browser if it's a private forum
jar = requests.cookies.RequestsCookieJar()
jar.set(cookie_name, cookie, domain=urlparse(base_url).hostname, path='/')

# Templates for the webpages
base_scheme = urlparse(base_url).scheme

# Template for the main page. Subsequent code will replace a few items indicated by
with open('templates/main.html', 'r') as main_file:
    main_template = main_file.read()

# Template for the individual topic pages
with open('templates/topic.html', 'r') as topic_file:
    topic_template = topic_file.read()

# Load CSS
with open('archived.css', 'r') as css_file:
    css = css_file.read()


# Function that writes out each individual topic page
def write_topic(topic_json):
    topic_download_url = base_url + '/t/' + topic_json['slug'] + '/' + str(topic_json['id'])
    topic_relative_url = 't/' + topic_json['slug'] + '/' + str(topic_json['id'])
    try:
        os.makedirs(topic_relative_url)
    except Exception as err:
        print ('in write_topic error:', 'make directory')
    response = requests.get(topic_download_url + '.json', cookies=jar)
    # posts_json will contain only the first 20 posts in a topic
    posts_json = response.json()['post_stream']['posts']
    # posts_stream will grab all of the post ids for that topic
    posts_stream = response.json()['post_stream']['stream']
    # get rid of first 20 in stream, as they are already in posts_json
    posts_stream = posts_stream[20:]
    # break stream into a list of list chunks of n posts each for lighter requests
    n = 20
    chunked_posts_stream = [posts_stream[i * n:(i + 1) * n] for i in range((len(posts_stream) + n - 1) // n)]
    posts_download_url = base_url + '/t/' + str(topic_json['id']) + '/posts.json?'
    # make a request for the content associated with each post id
    # chunk and append it to the posts_json list
    for chunk in chunked_posts_stream:
        formatted_posts_list = ""
        for post_id in chunk:
            formatted_posts_list = formatted_posts_list + 'post_ids[]=' + str(post_id) + '&'
        response = requests.get(posts_download_url + formatted_posts_list, cookies=jar)
        posts_2_json = response.json()['post_stream']['posts']
        posts_json.extend(posts_2_json)
    # generate that HTML
    post_list_string = ""
    for post_json in posts_json:
        post_list_string = post_list_string + post_row(post_json)
    topic_file_string = topic_template \
        .replace("<!-- TOPIC_TITLE -->", topic_json['fancy_title']) \
        .replace("<!-- JUST_SITE_TITLE -->", str(site_title.text)) \
        .replace("<!-- ARCHIVE_BLURB -->", archive_blurb) \
        .replace("<!-- POST_LIST -->", post_list_string)

    f = open(topic_relative_url + '/index.html', 'w')
    f.write(topic_file_string)
    f.close()


# Function that creates the text describing the individual posts in a topic
def post_row(post_json):
    avatar_url = post_json['avatar_template']
    parsed_url = urlparse(avatar_url)
    path = parsed_url.path
    avatar_file_name = path.split('/')[-1]
    if parsed_url.netloc and parsed_url.scheme:
        pass
    elif parsed_url.netloc:
        avatar_url = base_scheme + ':' + avatar_url
    else:
        avatar_url = base_url + avatar_url
    avatar_url = avatar_url.replace('{size}', '45')
    if not os.path.exists(os.getcwd() + '/images/' + avatar_file_name):
        try:
            response = requests.get(avatar_url, stream=True, cookies=jar)
            img = Image.open(BytesIO(response.content))
            img.save(os.getcwd() + '/images/' + avatar_file_name)
        except Exception as err:
            template = "An exception of type {0} occured. Arguments:\n{1!r}"
            message = template.format(type(err).__name__, err.args)
            print('in post_row error:', 'write avatar', avatar_url, message, cnt, topic['slug'], "\n===========\n")

    user_name = post_json['username']
    content = post_json['cooked']

    # Since we don't generate user information,
    # replace any anchors of class mention with a span
    soup = bs(content, "html.parser")
    mention_tags = soup.findAll('a', {'class': 'mention'})
    for tag in mention_tags:
        try:
            rep = bs('<span class="mention"></span>', "html.parser").find('span')
            rep.string = tag.string
            tag.replaceWith(rep)
        except TypeError:
            pass

    img_tags = soup.findAll('img')
    for img_tag in img_tags:
        if 'src' in img_tag:
            img_url = img_tag['src']
            parsed_url = urlparse(img_url)
            path = parsed_url.path
            file_name = path.split('/')[-1]
            if parsed_url.netloc and parsed_url.scheme:
                pass
            elif parsed_url.netloc:
                img_url = base_scheme + ':' + img_url
            else:
                img_url = base_url + img_url
            try:
                response = requests.get(img_url, stream=True, cookies=jar)
                img = Image.open(BytesIO(response.content))
                img.save(os.getcwd() + '/images/' + file_name)
                img_tag['src'] = '../../../images/' + file_name
            except Exception as err:
                template = "An exception of type {0} occured. Arguments:\n{1!r}"
                message = template.format(type(err).__name__, err.args)
                print('post_row', 'save image', file_name, img_url, message)
                img_tag['src'] = '../../../images/missing_image.png'

    content = ''
    for s in soup.contents:
        content = content + str(s)

    post_string = '      <div class="post_container">\n'
    post_string = post_string + '        <div class="avatar_container">\n'
    post_string = post_string + '          <img src="../../../images/' + avatar_file_name + '" class="avatar" />\n'
    post_string = post_string + '        </div>\n'
    post_string = post_string + '        <div class="post">\n'
    post_string = post_string + '          <div class="user_name">' + user_name + '</div>\n'
    post_string = post_string + '          <div class="post_content">\n'
    post_string = post_string + content + '\n'
    post_string = post_string + '          </div>\n'
    post_string = post_string + '        </div>\n'
    post_string = post_string + '      </div>\n\n'
    return post_string


# The topic_row function generates the HTML for each topic on the main page
category_url = base_url + '/categories.json'
response = requests.get(category_url, cookies=jar)
category_json = response.json()['category_list']['categories']
category_id_to_name = dict([(cat['id'], cat['name']) for cat in category_json])


def topic_row(topic_json):
    topic_html = '      <div class="topic-row">\n'
    topic_url = 't/' + topic_json['slug'] + '/' + str(topic_json['id'])
    topic_title_text = topic_json['fancy_title']
    topic_post_count = topic_json['posts_count']
    topic_pinned = topic_json['pinned_globally']
    try:
        topic_category = category_id_to_name[topic_json['category_id']]
    except KeyError:
        topic_category = ''

    topic_html = topic_html + '        <span class="topic">'
    if topic_pinned:
        topic_html = topic_html + '<i class="fa fa-thumb-tack"'
        topic_html = topic_html + ' title="This was a pinned topic so it '
        topic_html = topic_html + 'appears near the top of the page."></i>'
    topic_html = topic_html + '<a href="' + topic_url + '">'
    topic_html = topic_html + topic_title_text + '</a></span>\n'
    topic_html = topic_html + '        <span class="category">'
    topic_html = topic_html + topic_category + '</span>\n'
    topic_html = topic_html + '        <span class="post-count">'
    topic_html = topic_html + str(topic_post_count) + '</span>\n'
    topic_html = topic_html + '      </div>\n\n'
    return topic_html


# The action is just starting here.
# Check for the directory where plan to store things.
# Note that this will be overwritten!
if os.path.exists(path) and os.path.isdir(path):
    rmtree(path)
os.mkdir(path)
os.chdir(path)
os.mkdir('images')

# Grab the site title and logo - available via the API but only after login
# so we'll grab this one thing via Beautiful Soup.
response = requests.get(base_url, cookies=jar)
soup = bs(response.content, "html.parser")
site_title = soup.title
site_logo = soup.find("img", {"id": "site-logo"})
if site_logo is None:
    default_discourse_logo = b''
    with open(os.getcwd() + "/images/site-logo.png", "wb") as site_logo_fh:
        site_logo_fh.write(base64.decodestring(default_discourse_logo))
else:
    site_logo_image_url = site_logo.attrs['src']
    parsed = urlparse(site_logo_image_url)
    if parsed.netloc == '':
        site_logo_image_url = base_url + site_logo_image_url
    response = requests.get(site_logo_image_url, stream=True, cookies=jar)
    img = Image.open(BytesIO(response.content))
    img.save(os.getcwd() + '/images/site-logo.png')

encoded_missing_image_png = b''
with open(os.getcwd() + "/images/missing_image.png", "wb") as missing_image_fh:
    missing_image_fh.write(base64.decodestring(encoded_missing_image_png))

# This is where *most* of the action happens.

# The following bit of code grabs discourse_url/latest.json to generate a list of topics.
# For each of these topics, we apply topic_row to generate a line on the main page.
# If 'more_topics_url' appears in the response, we get more.

# Note that there might be errors but the code does attempt to deal with them gracefully by
# passing over them and continuing.
#
# My archive of DiscoureMeta generated 19 errors - all image downloads that replaced with a missing image PNG.
#

# max_more_topics is the number of pages the code will load from the all topics list on your site
# You might find that you need to change max_more_topics depending on the size of your forum
max_more_topics = 99
cnt = 0
topic_path = '/latest.json?no_definitions=true&page='
base_topic_url = base_url + topic_path
url = base_topic_url + str(cnt)
topic_list_string = ""
response = requests.get(url, cookies=jar)
topic_list = response.json()['topic_list']['topics']
for topic in topic_list:
    try:
        write_topic(topic)
        topic_list_string = topic_list_string + topic_row(topic)
    except Exception as err:
        pass
    sleep(1)  # Seems the polite thing to do
while 'more_topics_url' in response.json()['topic_list'].keys() and cnt < max_more_topics:
    print ('cnt is ', cnt, '\n============')
    cnt = cnt + 1
    url = base_topic_url + str(cnt)
    response = requests.get(url, cookies=jar)
    topic_list = response.json()['topic_list']['topics']

    # STARTED AT 1 'CAUSE IT APPEARS THAT
    # LAST THIS = FIRST NEXT   GOTTA CHECK THAT!
    for topic in topic_list[1:]:
        topic_list_string = topic_list_string + topic_row(topic)
        write_topic(topic)
# Wrap things up.
# Make the replacements and print the main file.
file_string = main_template \
    .replace("<!-- TITLE -->", str(site_title)) \
    .replace("<!-- JUST_SITE_TITLE -->", str(site_title.text)) \
    .replace("<!-- ARCHIVE_BLURB -->", archive_blurb) \
    .replace("<!-- TOPIC_LIST -->", topic_list_string)

f = open('index.html', 'w')
f.write(file_string)
f.close()

# Write out the CSS.
f = open('archived.css', 'w')
f.write(css)
f.close()
